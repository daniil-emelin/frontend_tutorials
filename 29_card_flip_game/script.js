const GAME_NODE = document.querySelector("#game-board");
const WINNING_TEXT = document.querySelector("#victory-message");
const START_GAME_BUTTON = document.querySelector("#new-game-button");

const VISIBLE_CARD_CLASSNAME = "visible";
const CARD_FLIP_TIMEOUT_MS = 500;

const CARD_ELEMENTS = ["üçì", "üçâ", "üçå", "üçè", "ü•ù", "üçá"];
const CARDS_AMOUNT = 12;

let VISIBLE_CARDS = [];

START_GAME_BUTTON.addEventListener("click", startGame);

function startGame() {
  // –û—á–∏—â–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
  [GAME_NODE, WINNING_TEXT].forEach((element) => (element.innerHTML = ""));

  const CARD_VALUES = generateArrayWithPairs(CARD_ELEMENTS, CARDS_AMOUNT);

  CARD_VALUES.forEach(renderCard);

  const renderedCards = document.querySelectorAll(".card");

  renderedCards.forEach((card) => card.classList.add(VISIBLE_CARD_CLASSNAME));

  setTimeout(() => {
    renderedCards.forEach((card) =>
      card.classList.remove(VISIBLE_CARD_CLASSNAME)
    );
  }, CARD_FLIP_TIMEOUT_MS * 2);
}

function generateArrayWithPairs(arr, fieldSize) {
  if (arr.length * 2 !== fieldSize) {
    const errorMessage =
      "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –º–∞—Å—Å–∏–≤ —Å –ø–∞—Ä–∞–º–∏ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –∏ —Ä–∞–∑–º–µ—Ä–∞.";

    console.error(errorMessage);
    return null;
  }

  const randomArray = [];
  const elementCounts = {};

  for (const item of arr) {
    elementCounts[item] = 0;
  }

  while (randomArray.length < fieldSize) {
    const randomIndex = Math.floor(Math.random() * arr.length);
    const randomElement = arr[randomIndex];

    if (elementCounts[randomElement] < 2) {
      randomArray.push(randomElement);
      elementCounts[randomElement]++;
    }
  }

  return randomArray;
}

function renderCard(cardText = "") {
  const card = document.createElement("div");
  card.classList.add("card");

  const cardInner = document.createElement("div");
  cardInner.classList.add("card-inner");

  const cardFront = document.createElement("div");
  cardFront.classList.add("card-front");

  const cardBack = document.createElement("div");
  cardBack.classList.add("card-back");

  cardFront.textContent = "?";
  cardBack.textContent = cardText;

  cardInner.appendChild(cardFront);
  cardInner.appendChild(cardBack);

  card.appendChild(cardInner);

  card.addEventListener("click", handleCardClick.bind(this, card));

  GAME_NODE.appendChild(card);
}

function handleCardClick(card) {
  // –ù–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç—É—é –∫–∞—Ä—Ç–æ—á–∫—É
  if (card.classList.contains(VISIBLE_CARD_CLASSNAME)) {
    return;
  }

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–∏–≥—Ä—ã—à–∞
  const checkVictory = () => {
    const visibleCardsNodes = document.querySelectorAll(
      `.${VISIBLE_CARD_CLASSNAME}`
    );

    // –ï—Å–ª–∏ –∫–æ–ª-–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–∞—Ä—Ç–µ —Ä–∞–≤–Ω–æ –æ–±—â–µ–º—É –∫–æ–ª-–≤—É –∫–∞—Ä—Ç, —Ç–æ —ç—Ç–æ –ø–æ–±–µ–¥–∞

    const isVictory = visibleCardsNodes.length === CARDS_AMOUNT;
    const victoryMessage = "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –ø–æ–±–µ–¥–∏–ª–∏!";

    if (isVictory) {
      WINNING_TEXT.textContent = victoryMessage;
    }
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤—ã–∏–≥—Ä—ã—à –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç—ã
  card
    .querySelector(".card-inner")
    .addEventListener("transitionend", checkVictory);

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–µ –∫–ª–∞—Å—Å visible, –∑–∞–ø—É—Å–∫–∞—è –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ–≤–æ—Ä–æ—Ç–∞
  card.classList.add(VISIBLE_CARD_CLASSNAME);

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –≤ –º–∞—Å—Å–∏–≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–∞—Ä—Ç
  VISIBLE_CARDS.push(card);

  // –¢–∞–∫ –∫–∞–∫ –Ω–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 2 –æ—Ç—Ä—ã—Ç—ã–µ –∫–∞—Ä—Ç—ã, –¥–µ–ª–∞–µ–º —Ç–∞–∫–æ–µ —É—Å–ª–æ–≤–∏–µ
  if (VISIBLE_CARDS.length % 2 !== 0) {
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏ –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—é—é –æ—Ç–∫—Ä—ã—Ç—ã–µ –∫–∞—Ä—Ç—ã, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–æ–≤–ø–∞–¥–∞—é—Ç –ª–∏ –æ–Ω–∏
  const [prelastCard, lastCard] = VISIBLE_CARDS.slice(-2);

  // –ï—Å–ª–∏ –¥–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∫–∞—Ä—Ç—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, —É–±–∏—Ä–∞–µ–º –∏—Ö –∏–∑ –º–∞—Å—Å–∏–≤–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–∞—Ä—Ç
  if (lastCard.textContent !== prelastCard.textContent) {
    VISIBLE_CARDS = VISIBLE_CARDS.slice(0, VISIBLE_CARDS.length - 2);

    // –ß–µ—Ä–µ–∑ 500 –º—Å –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ –∫–∞—Ä—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–≤–ø–∞–ª–∏
    setTimeout(() => {
      [lastCard, prelastCard].forEach((card) =>
        card.classList.remove(VISIBLE_CARD_CLASSNAME)
      );
    }, CARD_FLIP_TIMEOUT_MS);
  }
}

startGame();
